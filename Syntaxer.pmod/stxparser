#!/usr/bin/env pike

//| ============================================================================
//|
//| stxparser
//|
//| Author:
//|
//|   Pontus Östlund <pontus@poppa.se>
//|   Copyright © 2008
//|
//| Description:
//|
//|   This program will genrerate a syntax highlighting file from an Edit+
//|   syntax file (http://editplus.com/files.html). This file can then be used,
//|   as part of Syntaxer.Highlight, to generate syntax highlighted HTML files
//|   from source code.
//|
//|   NOTE! If you generate a new syntax file you need to alter
//|   Syntaxer.pmod/module.pmod (see the method get_parser()) to be able to
//|   highlight the new language automatically. Of course you also need to move
//|   the generated file to Syntaxer.pmod.
//|
//|   You might need to modify the generated file to get it to work as intended.
//|   Check that the mapping "_colors" has indices corresponting to the indices
//|   in "_keywords" or else keywords, classes, functions and so on wont be
//|   colorized.
//|
//| ============================================================================
//|
//| Tab width:    8
//| Indent width: 2
//|
//| ============================================================================

#define DEBUG
#define DIE(level, args...) do {        \
          if (level > 0) CWERROR(args); \
          else CWRITE(args);            \
          exit(level);                  \
	} while(0)

#define HELP                                                                   \
"\n  BBLACK:Usage:CLEAR: stxparser <file> [flags]"                             \
"\n  Where <file> is the path to \"lang.stx\""                                 \
"\n"                                                                           \
"\n  BBLACK:Flags:CLEAR:"                                                      \
"\n  -o --output <dir|file> : Output file. See examples for an explaination"   \
"\n  -h --help              : Shows this message"                              \
"\n"                                                                           \
"\n  BBLACK:Example:CLEAR:"                                                    \
"\n  BBLUE:./stxparser ada.stxCLEAR:"                                          \
"\n  Will write \"ada.pike\" to the current dir"                               \
"\n"                                                                           \
"\n  BBLUE:./stxparser ada.stx -o /home/poppaCLEAR:"                           \
"\n  Will write \"ada.pike\" to my home dir"                                   \
"\n"                                                                           \
"\n  BBLUE:./stx-parser ada.stx -o /home/poppa/foo.pikeCLEAR:"                 \
"\n  Will write \"foo.pike\" to my home dir\n\n"

#define OUTMSG                                                                 \
"\n  BBLACK:Wrote syntax file \"%s\"!CLEAR:"                                   \
"\n"                                                                           \
"\n  Before you can make use of this language file do the following:\n"        \
"\n    1. Make sure everything looks OK in the file! You might want to alter"  \
"\n       the values in the \"_colors\" variable and perhaps add some styles"  \
"\n       to the \"_styles\" variable."                                        \
"\n"                                                                           \
"\n       If you have generated a syntax file for a tag based lanuage you"     \
"\n       should alter the file to inherit the \"HTML\" class instead."        \
"\n"                                                                           \
"\n    2. When that's done move the file to Syntaxer.pmod."                    \
"\n"                                                                           \
"\n    3. You also migh want to add a \"case\" statement in"                   \
"\n       \"Syntaxer.get_parser()\" that corresponds to the new language."     \
"\n"                                                                           \
"\n  Then you'r ready to go!\n\n"

// We replace all \r\n and \r to \n
#define RFROM ({ "\r\n", "\r" })
#define RTO   ({ "\n", "\n" })
// We remove all spaces in keyword values if
#define KFROM ({ " " })
#define KTO   ({ "-" })
// These keywords are of no interest to us
#define SKIP  (< "NUMBER_PATTERN","SKIP_QUOTE","SPECIAL_STX" >)
// It's shorter!
#define TRIM(X) String.trim_all_whites(X)
// Is X a zero_type or an empty string or array
#define EMPTY(X) (!X || !sizeof(X))
// Creates a boolean value from "y". Like: #HTML_EMBEDDED=y
#define INT_KW(X) !!(keywords[X] && keywords[X] == "y")
// Return a string value from the kewords array
#define STR_KW(X) (keywords[X] || "")
// Adds the template index X, if it exists, to the output buffer
#define ADD(X,Y) !zero_type(tmpl[X]) && add(sprintf(tmpl[X], Y), "\n")
// Color definitions for colorized output to the console.
#define CLICLR ([           \
  "CLEAR:"  : "\033[0m",    \
  "RED:"    : "\033[31m",   \
  "BRED:"   : "\033[1;31m", \
  "BLACK:"  : "\033[1;m",   \
  "BBLACK:" : "\033[;1m",   \
  "BLUE:"   : "\033[34m",   \
  "BBLUE:"  : "\033[1;34m", \
  "GREEN:"  : "\033[32m",   \
  "BGREEN:" : "\033[1;32m"  ])

// Writes colorized output to stdout
#define CWRITE(args...)  write(clrcli(args))
// Writes colorized output to stderr
#define CWERROR(args...) werror(clrcli(args))

string                 current_keyword;
mapping(string:string) keywords      = ([]);
mapping(string:array)  key_keywords  = ([]);

constant tmpl = ([ // {{{

"TITLE" : #"
//! The name of the language
public string title = \"%s\";",

// =============================================================================

"LINECOMMENTS" : #"
//! What's a line comment. Like for PHP: ({ \"//\", \"#\" })
//!
//! @appears linecomment
protected array(string) _linecomments = ({ %s });",

// =============================================================================

"DELIMITERS": #"
//! Delimiters like (, ), ; and so on
//!
//! @appears delimiters
protected multiset(string) _delimiters = (< %s >);",

// =============================================================================

"BLOCKCOMMENTS" : #"
//! Definition of blockcomments. This should be an array if arrays where the
//! second array should contain two values: The first the pattern that starts
//! a block comment and the second the pattern that ends it.
//! Example: ({ ({ \"/*\", \"*/\" }) })
//!
//! @appears blockcomments
protected array(array(string)) _blockcomments = ({ %s });",

// =============================================================================

"PREFIXES" : #"
//! Some languages like PHP, Perl, Ruby has some variable prefixes
//! like $, @, %% so we can use them to highlight these variables
//! differently. The key should be an identifier to lookup in the
//! colors mapping and the value should be the actual prefix.
//! It could look like this for Perl:
//!
//!   prefixes = ([
//!     \"prefix1\" : \"$\",
//!     \"prefix2\" : \"%%\",
//!     \"prefix3\" : \"@\"
//!   ])
//!
//! or if you want all prefixes to be colorized the same way
//!
//!   prefixes = ([
//!     \"prefix\" : ({ \"$\", \"%%\", \"@\" })
//!   ]);
//!
//! @appears prefixes
protected mapping(string:string|array) _prefixes = ([ %s ]);",

// =============================================================================

"COLORS" : #"
//! The colors mapping defines how things should be colorized. Each index should
//! correspond to either the name of a base class variable containing some syntax
//! information - like \"blockcomments\" for instance - or an index in the
//! \"keywords\" mapping. The value should be a hexadecimal color definition.
//!
//! An example:
//!
//!   colors = ([
//!     \"blockcomment\"       : \"#aaa\",
//!     \"linecomment\"        : \"#aaa\",
//!     \"delimiter\"          : \"#00c\"
//!     \"built-in-functions\" : \"#900\"
//!   ]);
//!
//! There are a few generic indexes that are being used:
//!
//!   1. default:      For text that's not matching any rules
//!   2. delimiter:    For language delimiters.
//!   3. quote:        For strings
//!   4. numeric:      For numbers
//!   5. linecomment:  For line comments
//!   6. blockcomment: For block comments
//!   7. preprocessor: For preprocessor instructions (like <?php ?>)
//!   8. macro:        For macro directives like C's #define MACRO
//!
//! @appears colors
protected mapping(string:string) _colors = ([
  \"default\"      : \"#000\",
  \"delimiter\"    : \"#00C\",
  \"quote\"        : \"#070\",
  \"numeric\"      : \"purple\",
  \"linecomment\"  : \"#818A9E\",
  \"blockcomment\" : \"#818A9E\",
  \"preprocessor\" : \"lime\",
  \"macro\"        : \"#99510a\",

  //| NOTE!!! The ones below is auto generated. Check that they correspond to
  //| the indices in \"_keywords\". And you might want to change the colors!
  %s
]);",

// =============================================================================

"STYLES" : #"
//! Definitions for stuff that you want to add extra HTML around.
//! An example:
//!
//!   styles = ([
//!      \"keywords\"     : ({ \"<b>\", \"</b>\" }),
//!      \"preprocessor\" : ({ \"<b style='background: black;'>\", \"</b>\" }),
//!      \"macro\"        : ({ \"<b>\", \"</b>\" })
//!   ]);
//!
//! The indices works in the same way as for colors.
//!
//! @appears styles
protected mapping(string:array(string)) _styles = ([]);",

// =============================================================================

"PREPROCESSOR" : #"
//! HTML embedded languages use preprocessor instructions to tell when
//! the actual program code starts and ends. Add them here...
//! PHP would look like this:
//! ({
//!   ({ \"<?php\", \"?>\" }),
//!   ({ \"<?\", \"?>\" })
//! })
//!
//! @appears preprocs
protected array(array(string)) _preprocs = ({ %s });",

// =============================================================================

"HTML_EMBEDDED" : #"
//! Is the language HTML embedded or not?
//!
//! @appears html_embedded
public int(0..1) _html_embedded = %d;",

// =============================================================================

"CASE" : #"
//! Is the language case sensitive or not?
//!
//! @appears case_sensitive
protected int(0..1) _case_sensitive = %d;",

// =============================================================================

"ESCAPE" : #"
//! Escape char of the language. Like backslash for most C-like languages.
//!
//! @appears escape
protected string _escape = \"%s\";",

// =============================================================================

"QUOTES" : #"
//! Array of chars defining strings
//!
//! @appears quotes
protected array(string) _quotes = ({ %s });",

// =============================================================================

"KEYWORDS" : #"
//! Language keywords
//!
//! @appears keywords
protected mapping(string:multiset(string)) _keywords = ([
%s
]);"

]); // }}}

String.Buffer sb = String.Buffer();
function add = sb->add;

constant head = #"//| Generated by stxparser
//|
//| Inherit main class. If you'r creating a tag based syntax file inherit
//| HTML in Markup.pmod instead.
inherit .Hilite;\n";

constant defs = #"
/*******************************************************************************
 *                                                                             *
 *    NOTE! Uncomment the following variables if the language supports         *
 *    preprocessing macros. Otherwise the default values will apply.           *
 *                                                                             *
 ******************************************************************************/

//! For languages that has preprocessing macros
// protected int(0..1) macro = 1;

//! Can the macro start off of the first char. C# allows for this
// protected int(0..1) macro_indent = 0;

//! Default macro character
// protected string macro_char = \"#\";";

constant ctor = #"
//! Constructor
//!
//! If you don't want to override one or more variables just comment them out
//! or remove them. If you wan't to add to the default variables just add a +
//! in front of =.
void create()
{
  ::create();

  linecomments   = _linecomments;
  delimiters     = _delimiters;
  blockcomments  = _blockcomments;
  prefixes       = _prefixes;
  colors         = _colors;
  styles         = _styles;
  preprocs       = _preprocs;
  html_embedded  = _html_embedded;
  case_sensitive = _case_sensitive;
  escape         = _escape;
  quotes         = _quotes;
  keywords       = _keywords;
}";

int main(int argc, array(string) argv)
{
  string data, outfile;
  int(0..1) outfile_is_dir = 0;

  if (mixed e = catch {
      foreach (Getopt.find_all_options(argv, ({
	({ "output", Getopt.HAS_ARG, ({ "-o", "--ouput" }) }),
	({ "help",   Getopt.NO_ARG,  ({ "-h", "--help"  }) })
      }), 0, 1), array opt) {

	if (has_index(opt, 1) && stringp( opt[1] ) && opt[1][0] == '=')
	  opt[1] = opt[1][1..];

	switch ( opt[0] ) {
	  case "help":   DIE(0, HELP);
	  case "output":
	    outfile = opt[1];
	    if (Stdio.is_dir(outfile))
	      outfile_is_dir = 1;

	    break;
	}
      }
    }
  ) DIE(1, "\nBRED:Error in arguments:CLEAR: %s%s", describe_error(e), HELP);

  argv -= ({ 0 });

  if (sizeof(argv) < 2)
    DIE(1, "\nMissing arguments!\n%s", HELP);

  if (!Stdio.exist( argv[1] ))
    DIE(1, "Input file \"%s\" doesn't exist!\n", argv[1] );

  if (mixed e = catch(data = Stdio.read_file( argv[1] )))
    DIE(1, "Error reading input file: %s", describe_error(e));

  foreach (replace(data, RFROM, RTO)/"\n", string line) {
    line = TRIM(line);
    if (EMPTY(line) || line[0] == ';' || line == "#")
      continue;

    if (line[0] == '#') {
      current_keyword = 0;
      sscanf(line, "#%s%*[=]%s", string kw, string kv);
      kw = kw && upper_case(kw);

      if (( EMPTY(kv) || SKIP[kw] ) && kw != "KEYWORD")
	continue;

      if (kw == "KEYWORD") {
	if (EMPTY(kv))
	  kv = sprintf("keyword-%d", sizeof(indices(key_keywords)) + 1);
	current_keyword = lower_case(replace(kv, KFROM, KTO));
	key_keywords[current_keyword] = ({});
      }
      else {
	if (zero_type( keywords[kw] ))
	  keywords[kw] = kv;
      }

      continue;
    }

    if (current_keyword && arrayp( key_keywords[current_keyword] )) {
      if (keywords["CASE"] && keywords["CASE"] == "n")
	line = lower_case(line);

      key_keywords[current_keyword] += ({ line });
    }
  }

  add(head);
  ADD("TITLE",         STR_KW("TITLE"));
  ADD("CASE",          INT_KW("CASE"));
  ADD("HTML_EMBEDDED", INT_KW("HTML_EMBEDDED"));
  ADD("ESCAPE",        safe_escape(STR_KW("ESCAPE")));
  ADD("DELIMITERS",    array_to_str(STR_KW("DELIMITER")/1));
  ADD("QUOTES",        array_to_str(collect("QUOTATION")));
  ADD("LINECOMMENTS",  array_to_str(collect("LINECOMMENT")));
  ADD("COLORS",        mk_colorkeys());
  ADD("STYLES",        "");
  ADD("PREFIXES",      "\"prefix\" : ({ " + array_to_str(collect("PREFIX")) +
                       " })");

  mapping m1 = collect2("COMMENTON");
  mapping m2 = collect2("COMMENTOFF");

  if (sizeof(m1) != sizeof(m2)) {
    werror("\nWarning: sizeof(COMMENTON) != sizeof(COMMENTOFF)! Please check "
           "\"%s\" and make sure the number of these directives equals "
	   "eachother!\n\n", argv[1] );
  }
  else {
    array a = ({});
    foreach (m1; int k;)
      a += ({ "({ " + array_to_str(({ m1[k],  m2[k] })) + " })" });

    ADD("BLOCKCOMMENTS", a*", ");
  }

  m1 = collect2("SCRIPT_BEGIN");
  m2 = collect2("SCRIPT_END");

  if (sizeof(m1) != sizeof(m1)) {
    werror("\nWarning: sizeof(SCRIPT_BEGIN) != sizeof(SCRIPT_END)! Please check "
           "\"%s\" and make sure the number of these directives equals "
	   "eachother!\n\n", argv[1] );
  }
  else {
    array a = ({});
    foreach (m1; int k;)
      a += ({ "({ " + array_to_str(({ m1[k],  m2[k] })) + " })" });

    ADD("PREPROCESSOR", a*", ");
  }

  add(defs + "\n");
  ADD("KEYWORDS", mk_keywords());
  add(ctor);

  string fname = get_filename( argv[1] );

  if (outfile) {
    if (outfile_is_dir)
      fname = combine_path(outfile, fname);
    else
      fname = outfile;
  }
  
  if (!has_suffix(fname, ".pike"))
    fname += ".pike";

  Stdio.write_file(fname, (string)sb);
  CWRITE(OUTMSG, fname);

  return 0;
}

//| ============================================================================
//|
//|                         Utility stuff below...
//|
//| ============================================================================

string get_filename(string s)
{
  s = reverse(basename(s));
  int p = search(s, ".");
  if (p > -1)
    s = s[p+1..];

  return reverse(s);
}

int clrindex = 0;
string mk_colorkeys()
{
  array out = ({});
  random_seed(4);

  foreach (indices(key_keywords), string k) {
    array rgb = gethex(0x08A+clrindex*16, random(16));
    Image.Color clr = Image.Color(@(Array.shuffle(rgb)));
    out += ({ sprintf("%-27O : \"%s\"", k, clr->html()) });
    clrindex++;
  }

  return out*",\n  ";
}

array gethex(int hex1, int hex2) // {{{
{
  int r = hex1 >> 16;
  int g = hex1 >> 8 & 0xFF;
  int b = hex1 & 0xFF;

  int rd = (hex2 >> 16)-r;
  int gd = (hex2 >> 8 & 0xFF)-g;
  int bd = (hex2 & 0xFF)-b;

  return ({ hex1, (r+rd)<<16 | (g+gd)<<8 | (b+bd), hex2 }) ;
}

string mk_keywords() // {{{
{
  string s = "";

  foreach (key_keywords; string k; array a) {
    string t = "", v = "    ";
    foreach (a, string word) {
      if (sizeof(v) + sizeof(word) > 70) {
	t += v + "\n    ";
	v = "";
      }
      v += "\"" + word + "\",";
    }

    if (sizeof(v))
      t += v;

    s += "  \"" + k + "\" : (<\n" + t[..sizeof(t)-2] + " >),\n\n";
  }

  return s[..sizeof(s)-4];
}

string array_to_str(array a)
{
  array(string) tmp = ({});
  a && map(a, lambda(string s) { tmp += ({ sprintf("%O", s) }); } );
  return tmp*",";
}

array collect(string prefix)
{
  array a = ({});
  foreach (glob(prefix + "*", indices(keywords)), string key)
    a += ({ keywords[key] });

  return a;
}

mapping collect2(string prefix)
{
  mapping a = ([]);
  foreach (glob(prefix + "*", indices(keywords)), string key) {
    int c  = (int)(key - prefix);
    a[c] = keywords[key];
  }

  return a;
}

string safe_escape(string s)
{
  if (!EMPTY(s) && s[0] == '\\') {
    s = TRIM(s);
    if (sizeof(s) % 2 == 0)
      return s;
    else s += "\\";
  }

  return s;
}

string clrcli(mixed ... args)
{
  if (args && sizeof(args) && args[0][-1] != '\n')
    args[0] += "\n";

  string s = sprintf(@args);

#ifndef __NT__
  s = replace(s+"CLEAR:", indices(CLICLR), values(CLICLR));
#endif

  return s;
}

void trace(mixed ... args)
{
#ifdef DEBUG
  if (args && sizeof(args) && args[0][-1] != '\n')
    args[0] += "\n";

  write( "Map parser: " + args[0], @args[1..] );
#endif
}