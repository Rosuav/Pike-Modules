#!/usr/bin/env pike
//| ============================================================================
//|
//| codify
//|
//| Author:
//|
//|   Pontus Ã–stlund <pontus@poppa.se>
//|   Copyright (C) 2008
//|
//| Description:
//|
//|   This program will genrerate a HTML file with syntax highlighted code from
//|   a file of source code.
//|
//| ============================================================================
//|
//| Tab width 8
//| Indent width 2
//|
//| ============================================================================

//#define DEBUG
#define DIE(level, args...) do {    \
          if (level) CWERROR(args); \
	  else CWRITE(args);        \
          exit(level);              \
	} while(0)

#define HELP                                                                   \
"\n  BBLACK:Usage:CLEAR: codify <file> [flags]"                                \
"\n  Where <file> is the path to the source file to highlight."                \
"\n"                                                                           \
"\n  BBLACK:Flags:CLEAR:"                                                      \
"\n  -o --output   <dir|file> : Output file. See examples for an explaination" \
"\n  -t --tabsize  <number>   : The width of a tab"                            \
"\n  -l --language <string>   : What syntax to use for highlighting"           \
"\n  -n --no-lines            : If set no line numbers will be displayed"      \
"\n  -h --help                : Shows this message"                            \
"\n"                                                                           \
"\n  BBLACK:Examples:CLEAR:"                                                   \
"\n  BBLUE:./codify roxen.pikeCLEAR:"                                          \
"\n  Will generate \"roxen.pike.html\" in the current directory"               \
"\n"                                                                           \
"\n  BBLUE:./codify my-cli-prog -l ruby -t 2CLEAR:"                            \
"\n  Will write \"my-cli-prog.html\" to the current directory and use the Ruby"\
"\n  syntax file or highlighting and treat one tab as two spaces."             \
"\n"                                                                           \
"\n  BBLUE:./codify source.java -o /var/www/sourcesCLEAR:"                     \
"\n  Will write \"source.java.html\" to the directory \"/var/www/sources\""    \
"\n"                                                                           \
"\n  BBLUE:./codify source.java -o /var/www/sources/my-java.htmlCLEAR:"        \
"\n  Will write \"my-java.html\" to the directory \"/var/www/sources\"\n\n"

#define OUTMSG "\n  BBLACK:Wrote file \"%s\"!CLEAR:\n\n"
#define CLICLR ([ \
  "CLEAR:"  : "\033[0m",    \
  "RED:"    : "\033[31m",   \
  "BRED:"   : "\033[1;31m", \
  "BLACK:"  : "\033[1;m",   \
  "BBLACK:" : "\033[;1m",   \
  "BLUE:"   : "\033[34m",   \
  "BBLUE:"  : "\033[1;34m", \
  "GREEN:"  : "\033[32m",   \
  "BGREEN:" : "\033[1;32m"  ])

// Writes colorized output to stdout
#define CWRITE(args...)  write(clrcli(args))
// Writes colorized output to stderr
#define CWERROR(args...) werror(clrcli(args))

// Make sure you have the module Syntaxer.pmod in your module path
import Syntaxer;

constant html_template = #"
<html>
  <head>
    <style type='text/css'>
    BODY { font: 80%%/120%% verdana, sans-serif; }
    PRE, OL LI { font: 11px/120%% 'dejavu sans mono','liberation mono',monospace }
    </style>
  </head>
  <body>
    <h1>%s</h1>
    <p><strong>%d</strong> lines of <strong>%s</strong> code</p>
    <%s>%s</%[3]s>
  </body>
</html>";

int main(int argc, array(string) argv)
{
  string language, outfile, wtag = "ol";
  int    tabsize = 8, outfile_is_dir = 0, lnr = 1;

  if (mixed e = catch {
      foreach (Getopt.find_all_options(argv, ({
	({ "tabsize",  Getopt.HAS_ARG, ({ "--tabsize",  "-t" }) }),
	({ "language", Getopt.HAS_ARG, ({ "--language", "-l" }) }),
	({ "output",   Getopt.HAS_ARG, ({ "--output",   "-o" }) }),
	({ "nolines",  Getopt.NO_ARG,  ({ "--no-lines", "-n" }) }),
	({ "help",     Getopt.NO_ARG,  ({ "--help",     "-h" }) })
      }), 0, 1),  array opt) {

	if (has_index(opt, 1) && stringp( opt[1] ) && opt[1][0] == '=')
	  opt[1] = opt[1][1..];

	switch ( opt[0] )
	{
	  case "help":     DIE(0, HELP);
	  case "tabsize":  tabsize  = (int)opt[1]; break;
	  case "language": language = opt[1];      break;
	  case "nolines":  lnr      = 0;           break;
	  case "output":
	    outfile = opt[1];
	    if (Stdio.is_dir(outfile))
	      outfile_is_dir = 1;

	    break;
	}
      }
    }
  ) DIE(1, "\nBRED:Error in options:CLEAR: %s%s", describe_error(e), HELP);

  argv -= ({ 0 });

  if (sizeof(argv) < 2)
    DIE(1, "\nMissing arguments!\n%s", HELP);

  if (!Stdio.exist( argv[1] ))
    DIE( 1, "Input file \"%s\" doesn't exist!\n", argv[1] );

  if (!tabsize)       tabsize  = 8;
  if (!outfile)       outfile  = basename( argv[1] );
  if (outfile_is_dir) outfile  = combine_path(outfile, basename( argv[1] ));
  if (!has_suffix(outfile, ".html"))
    outfile += ".html";

  string in_file = argv[1];

  if (!language) {
    language = reverse(in_file);
    language = reverse( language[..search(language, ".")-1] );
  }
  
  Syntaxer.Hilite s = Syntaxer.get_parser(language);
  s->tabsize = tabsize;

  if (!lnr) {
    wtag = "pre";
    s->line_wrap = ({ "", "\n" });
  }
  
  string source;

#ifdef DEBUG
  trace("Gauge: %O", gauge(source = s->parse(Stdio.read_file(in_file))));
#else
  source = s->parse(Stdio.read_file(in_file));
#endif

  string outdata = sprintf(
    html_template,
    basename(in_file),
    s->get_lines(),
    s->get_title(),
    wtag,
    source
  );

  if (String.width(outdata) == 8)
    catch(outdata = utf8_to_string(outdata));

  if (mixed e = catch(Stdio.write_file(outfile, outdata)))
    DIE(1, "Error writing file: %s", describe_error(e));

  CWRITE(OUTMSG, outfile);

  return 0;
}

string clrcli(mixed ... args)
{
  if (args && sizeof(args) && sizeof( args[0] ) && args[0][-1] != '\n')
    args[0] += "\n";

  string s = sprintf(@args);

#ifndef __NT__
  s = replace(s+"CLEAR:", indices(CLICLR), values(CLICLR));
#endif

  return s;
}

void trace(mixed ... args)
{
#ifdef DEBUG
  if (args && sizeof(args) && args[0][-1] != '\n')
    args[0] += "\n";

  write( "Codify: " + args[0], @args[1..] );
#endif
}