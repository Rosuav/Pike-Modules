#!/usr/bin/env pike

#define DG_DEBUG

#ifdef DG_DEBUG
# define werror(x...) werror(sprintf(x) + "\n")
#else
# define werror(x...)
#endif

#define DIE(e, x...) do { werror(x); exit(e); } while(0)
#define TRIM(x) String.trim_all_whites(x)

constant HELP = #"
 Usage: docgen <srcfile> <outfile> [flags]

   <srcfile>     The .pike or .pmod to parse
   <outfile>     Where to write the resulting XML

 Flags:

   -f --docrules <path>    A path to a file describing which files to extract
                           and how. Each line should be built like a command
			   to this program.
   -t --type     <string>  Is it a class, module or namespace.
   -n --name     <string>  The name of the class, module or namespace.
   -p --parents  <string>  Parent classes, modules, namespaces. Comma 
                           delimited string.
   -h --help               This message";

import Tools.AutoDoc.ProcessXML;
import Parser.XML.Tree;

constant TYPES = (< "module", "namespace", "class" >);

int main(int argc, array(string) argv)
{
  int rc = 0;

  mapping args = get_args(argv);
  if (!args) return 1;
  
  if (args->docfile) {
    string dfile = args->docfile;
    if (!Stdio.exist(dfile))
      DIE(1, "\"docrules\" file \"%s\" doesn't exist!\n", dfile);

    array lines = ({});
    foreach (Stdio.read_file(dfile)/"\n", string ln) {
      ln = String.trim_all_whites(ln);
      if (!sizeof(ln) || ln[0] == '#') continue;
      lines += ({ ln });
    }
    
    string this_dir = dirname(combine_path(getcwd(), dfile));
    array  xmlfiles = ({});

    multiset my_modules = (<>);
    
    foreach (lines, string line) {
      if (!sizeof(line)) continue;

      args = get_args(map(line/" ", String.trim_all_whites)-({ "" }));

      if (args->parents) {
	args->parents = map(args->parents/",", String.trim_all_whites);
	my_modules += (multiset)args->parents;
      }

      if (args->type == "module")
	my_modules += (< args->name >);

      args->infile = combine_path(this_dir, args->infile);
      args->outfile = combine_path(this_dir, args->outfile);

      xmlfiles += ({ args->outfile });

      werror("\n>>> Parsing %s\n\n", args->infile);
      
      //if (!args->parents || !sizeof(args->parents))
      //  args->parents = ({ "predef" });

      parse(args->infile, args->outfile, args->type, args->name, args->parents, 
            my_modules);
    }

    if (sizeof(xmlfiles) > 1)
      merge(xmlfiles, this_dir);
  }
  else {
    multiset my_modules = (<>);
    if (args->parents) {
      args->parents = map(args->parents/",", String.trim_all_whites);
      my_modules = (multiset)args->parents;
    }

    if (args->type == "module")
      my_modules += (< args->name >);

    parse(args->infile, args->outfile, args->type, args->name, args->parents, 
          my_modules);
  }

  return rc;
}

mapping get_args(array(string) argv)
{
  string infile, outfile, type, name, docfile;
  string|array parents;

  foreach (Getopt.find_all_options(argv, ({
    ({ "dfile",   Getopt.HAS_ARG, ({ "-f", "--docrules" }) }),
    ({ "help",    Getopt.NO_ARG,  ({ "-h", "--help"     }) }),
    ({ "type",    Getopt.HAS_ARG, ({ "-t", "--type"     }) }),
    ({ "name",    Getopt.HAS_ARG, ({ "-n", "--name"     }) }),
    ({ "parents", Getopt.HAS_ARG, ({ "-p", "--parents"  }) }) })), array opt)
  {
    switch ( opt[0] )
    {
      case "help":  write("%s\n\n", HELP); return 0;
      case "type": 
	if ( !TYPES[opt[1]] ) {
	  DIE(1, "Argument --type must be \"%s\"\n", 
	         String.implode_nicely((array)TYPES, "or"));
	}

	type = opt[1];
	break;

      case "name":    name    = opt[1]; break;
      case "parents": parents = opt[1]; break;
      case "dfile":   docfile = opt[1]; break;
    }
  }

  if (!type && !docfile) DIE(1, "Missing required argument --type\n");
  if (!name && !docfile) DIE(1, "Missing required argument --name\n");

  argv -= ({ 0 });
  
  if (!docfile) {
    infile = argv[0];
    outfile = argv[1];
  }

  return ([
   "infile"  : infile,
   "outfile" : outfile,
   "type"    : type,
   "name"    : name,
   "parents" : parents,
   "docfile" : docfile
  ]);
}

int parse(string pikefile, string outfile, string type, string name,
           string|array parents, void|multiset my_modules)
{
  if (stringp(parents) && sizeof(parents))
    parents = map( parents/",", String.trim_all_whites);

  parents = parents || ({});

  string xml;
  if (mixed e = catch(xml = 
    Tools.AutoDoc.ProcessXML.extractXML(pikefile, 1, type, name, parents))
  ) DIE(1, "Error extracting XML: %O\n", e);

  Node n = parse_input(TRIM(xml));

  my_modules = my_modules || (<>); 

  mapping(string:string) my_colors = ([
    "quote"        : "#d4d21f",
    "linecomment"  : "#555568",
    "blockcomment" : "#555568",
    "delimiter"    : "#82bbfb",
    "default"      : "#CCC",
    "numeric"      : "#c00",
    "keywords"     : "#ff6666",
    "keywords1"    : "#b9b91d",
    "keywords3"    : "#7466ff",
    "macro"        : "#BE4A00"
  ]);
  
  n && n->walk_inorder(
    lambda(Node cn) {
      if (cn->get_tag_name() == "code") {
	mapping a = cn->get_attributes();

	Syntaxer.Hilite s = Syntaxer.get_parser(a->lang||"pike");
	s->tabsize = (int)a->tabsize||2;
	s->get_keywords()["keywords3"] += my_modules;
	m_delete(s->get_styles(), "keywords");
	m_delete(s->get_styles(), "keywords1");
	mapping(string:string) clrs = s->get_colors();
	
	foreach (clrs; string ckey; string cval)
	  clrs[ckey] = my_colors[ckey];

	int cut = (int)a->detab;
	string cut_macro = " "*cut;

	string|array d = replace(cn->render_xml(), "&gt;", ">");
	d = map(d/"\n", lambda(string line) {
	    if (has_prefix(line, cut_macro))
	      return line[cut..];
	    return line;
	  }
	);
	d = d[1..sizeof(d)-2]*"\n";
	d = s->parse(d);
	d = d && ("<code example='examle'><ol>\n" + d + "</ol></code>")||"";
	
	//werror("%s", d);
	//exit(0);
	
	Node nn = parse_input(d);
	cn->get_parent()->replace_child(cn, nn);
      }
      else if (cn->get_tag_name() == "pre") {
	string d = map(cn->render_xml()/"\n", 
	  lambda(string line) {
	    return sizeof(line) && line[0] == ' ' && line[1..] || line;
	  }
	) * "\n";

	Node nn = parse_input("<pre>" + d + "</pre>");
	cn->get_parent()->replace_child(cn, nn);
      }
    }
  );

  postProcess( n[0] );

  Stdio.write_file(outfile, replace(n->render_xml(), " name='predef'", ""));
}

void merge(array(string) xmlfiles, string path)
{
  SimpleNode root = simple_parse_file( xmlfiles[0] );
  SimpleNode root2;
  root && root->walk_preorder(
    lambda (Node n) {
      if (n->get_tag_name() == "namespace") {
	werror("zzz %O\n", n->get_attributes());
	if (!n->get_attributes()->name) {
	  werror("no name attribute in namespace\n");
	  AttributeNode an = AttributeNode("name", "predef");
	  //n->add_child(an);
	}
      }
      else if (n->get_tag_name() == "module") {
	root2 = n;
	return STOP_WALK;
      }
    }
  );

  foreach (xmlfiles[1..], string file) {
    SimpleNode child = simple_parse_file(file);
    child && child->walk_preorder(
      lambda(SimpleNode cn) {
	if (cn->get_tag_name() == "module") {
	  child = cn;
	  return STOP_WALK;
	}
      }
    );

    mergeTrees(root2, child);
  }

  Stdio.write_file(combine_path(path, "merged.xml"), root2->render_xml());
}

